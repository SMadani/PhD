pre {
	var outputRoot = "output/";
}

rule All2Dot {
	parameters : Map {
		"classes" = EClass.all, 
		"format" = "graphviz-dot",
		"path" = List{"Model", "(All classes)"},
		"icon" = "diagram-ff0000"
	}
	template: "ecore2dot.egl"
	target: outputRoot+"ecoredot.txt"
}

rule Ecore23D {
	parameters : Map {
		"classes" = EClass.all, 
		"format" = "html",
		"path" = List{"Model", "3D inheritance"},
		"icon" = "diagram-fffbd7"
	}
	template: "ecore23d.egl"
	target: outputRoot+"ecore23d.txt"
}

rule Ecore2Barchart {
	parameters : Map {
		"classes" = EClass.all, 
		"format" = "html",
		"path" = List{"Model", "Stats"},
		"icon" = "barchart"
	}
	template: "stats.egl"
	target: outputRoot+"barchart.txt"
}

@parallel
rule EClass2Dot 
	transform c : EClass {
	parameters {
		var classes = Set{c};
		classes.addAll(c.eReferences.eType);
		classes.addAll(c.eSuperTypes);
		//classes.addAll(EClass.all.select(o|o.eSuperTypes.includes(c)));	
		return Map {
			"classes" = classes, 
			"format" = "graphviz-dot",
			"path" = Sequence{"Model", "Classes", c.name},
			"icon" = "diagram-fffbd7"
		};
	}
	template: "eclass2dot.egl"
	target: outputRoot+c.name+"_eclassdot.txt"
}