/**
 *
 * $Id$
 */
package javaMM.validation;

import javaMM.AbstractMethodInvocation;
import javaMM.Block;
import javaMM.MethodRef;
import javaMM.SingleVariableDeclaration;
import javaMM.TypeAccess;
import javaMM.TypeParameter;

import org.eclipse.emf.common.util.EList;

/**
 * A sample validator interface for {@link javaMM.AbstractMethodDeclaration}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface AbstractMethodDeclarationValidator {
	boolean validate();

	boolean validateBody(Block value);
	boolean validateParameters(EList<SingleVariableDeclaration> value);
	boolean validateThrownExceptions(EList<TypeAccess> value);
	boolean validateTypeParameters(EList<TypeParameter> value);
	boolean validateUsagesInDocComments(EList<MethodRef> value);
	boolean validateUsages(EList<AbstractMethodInvocation> value);
}
