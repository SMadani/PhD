/**
 */
package javaMM;

import java.util.Map;

import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Class Declaration</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link javaMM.ClassDeclaration#getSuperClass <em>Super Class</em>}</li>
 * </ul>
 *
 * @see javaMM.JavaMMPackage#getClassDeclaration()
 * @model annotation="http://www.eclipse.org/emf/2002/Ecore constraints='comparatorImplementsSerializable'"
 * @generated
 */
public interface ClassDeclaration extends TypeDeclaration {
	/**
	 * Returns the value of the '<em><b>Super Class</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Super Class</em>' containment reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Super Class</em>' containment reference.
	 * @see #setSuperClass(TypeAccess)
	 * @see javaMM.JavaMMPackage#getClassDeclaration_SuperClass()
	 * @model containment="true"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://www.eclipse.org/MoDisco/Java/0.2.incubation/java!ClassDeclaration!superClass'"
	 * @generated
	 */
	TypeAccess getSuperClass();

	/**
	 * Sets the value of the '{@link javaMM.ClassDeclaration#getSuperClass <em>Super Class</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Super Class</em>' containment reference.
	 * @see #getSuperClass()
	 * @generated
	 */
	void setSuperClass(TypeAccess value);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model kind="operation"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * self.bodyDeclarations-&gt;selectByKind(MethodDeclaration)\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_MethodDeclaration_0 = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_MethodDeclaration, null);\nfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.BodyDeclaration%&gt;&gt; bodyDeclarations = this.getBodyDeclarations();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_bodyDeclarations = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_BodyDeclaration, bodyDeclarations);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; selectByKind = (&lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt;)&lt;%org.eclipse.ocl.pivot.library.collection.CollectionSelectByKindOperation%&gt;.INSTANCE.evaluate(executor, BOXED_bodyDeclarations, TYP_javaMM_c_c_MethodDeclaration_0);\nfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.MethodDeclaration%&gt;&gt; ECORE_selectByKind = ((&lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt;.IdResolverExtension)idResolver).ecoreValueOfAll(&lt;%javaMM.MethodDeclaration%&gt;.class, selectByKind);\nreturn (&lt;%org.eclipse.emf.common.util.EList%&gt;&lt;&lt;%javaMM.MethodDeclaration%&gt;&gt;)ECORE_selectByKind;'"
	 * @generated
	 */
	EList<MethodDeclaration> getMethods();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * getMethods()\n * -&gt;exists(method | method.name = \'equals\' and\n *   method.parameters-&gt;first().type.type.name = \'Object\' and\n *   method.parameters-&gt;size() = 1 and\n *   method.thrownExceptions-&gt;isEmpty() and method.modifier &lt;&gt; null and method.modifier.visibility = VisibilityKind::public and\n *   method.returnType.type.oclIsTypeOf(PrimitiveTypeBoolean))\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.MethodDeclaration%&gt;&gt; getMethods = this.getMethods();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_getMethods = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_MethodDeclaration, getMethods);\n/*@Thrown\052/ &lt;%java.lang.Object%&gt; accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_method = BOXED_getMethods.iterator();\n/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; exists;\nwhile (true) {\n\tif (!ITERATOR_method.hasNext()) {\n\t\tif (accumulator == null) {\n\t\t\texists = null;\n\t\t}\n\t\telse if (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t}\n\t\telse {\n\t\t\tthrow (&lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;)accumulator;\n\t\t}\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%javaMM.MethodDeclaration%&gt; method = (&lt;%javaMM.MethodDeclaration%&gt;)ITERATOR_method.next();\n\t/**\n\t * method.name = \'equals\' and\n\t * method.parameters-&gt;first().type.type.name = \'Object\' and\n\t * method.parameters-&gt;size() = 1 and\n\t * method.thrownExceptions-&gt;isEmpty() and method.modifier &lt;&gt; null and method.modifier.visibility = VisibilityKind::public and\n\t * method.returnType.type.oclIsTypeOf(PrimitiveTypeBoolean)\n\t \052/\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_4;\n\ttry {\n\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_3;\n\t\ttry {\n\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_2;\n\t\t\ttry {\n\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_1;\n\t\t\t\ttry {\n\t\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_0;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.SingleVariableDeclaration%&gt;&gt; parameters_0 = method.getParameters();\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_parameters_0 = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_SingleVariableDeclaration, parameters_0);\n\t\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_and;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.String%&gt; name = method.getName();\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean eq = &lt;%javaMM.JavaMMTables%&gt;.STR_equals.equals(name);\n\t\t\t\t\t\t\t/*@Thrown\052/ boolean and;\n\t\t\t\t\t\t\tif (eq) {\n\t\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.SingleVariableDeclaration%&gt; first = (&lt;%javaMM.SingleVariableDeclaration%&gt;)&lt;%org.eclipse.ocl.pivot.library.collection.OrderedCollectionFirstOperation%&gt;.INSTANCE.evaluate(BOXED_parameters_0);\n\t\t\t\t\t\t\t\tif (first == null) {\n\t\t\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::SingleVariableDeclaration::type\\\'\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.TypeAccess%&gt; type_0 = first.getType();\n\t\t\t\t\t\t\t\tif (type_0 == null) {\n\t\t\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::TypeAccess::type\\\'\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.Type%&gt; type_1 = type_0.getType();\n\t\t\t\t\t\t\t\tif (type_1 == null) {\n\t\t\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::NamedElement::name\\\'\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.String%&gt; name_0 = type_1.getName();\n\t\t\t\t\t\t\t\tfinal /*@Thrown\052/ boolean eq_0 = &lt;%javaMM.JavaMMTables%&gt;.STR_Object.equals(name_0);\n\t\t\t\t\t\t\t\tand = eq_0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tand = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tCAUGHT_and = and;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\t\tCAUGHT_and = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; size = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionSizeOperation%&gt;.INSTANCE.evaluate(BOXED_parameters_0);\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean eq_1 = size.equals(&lt;%javaMM.JavaMMTables%&gt;.INT_1);\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_0 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and, eq_1);\n\t\t\t\t\t\tCAUGHT_and_0 = and_0;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_and_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.TypeAccess%&gt;&gt; thrownExceptions = method.getThrownExceptions();\n\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_thrownExceptions = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_TypeAccess, thrownExceptions);\n\t\t\t\t\tfinal /*@NonInvalid\052/ boolean isEmpty = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionIsEmptyOperation%&gt;.INSTANCE.evaluate(BOXED_thrownExceptions).booleanValue();\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_1 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_0, isEmpty);\n\t\t\t\t\tCAUGHT_and_1 = and_1;\n\t\t\t\t}\n\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\tCAUGHT_and_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t}\n\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier = method.getModifier();\n\t\t\t\tfinal /*@NonInvalid\052/ boolean ne = modifier != null;\n\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_2 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_1, ne);\n\t\t\t\tCAUGHT_and_2 = and_2;\n\t\t\t}\n\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\tCAUGHT_and_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t}\n\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_eq_2;\n\t\t\ttry {\n\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier_0 = method.getModifier();\n\t\t\t\tif (modifier_0 == null) {\n\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::Modifier::visibility\\\'\");\n\t\t\t\t}\n\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.VisibilityKind%&gt; visibility = modifier_0.getVisibility();\n\t\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_visibility = visibility == null ? null : &lt;%javaMM.JavaMMTables%&gt;.ENUMid_VisibilityKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(visibility.getName()));\n\t\t\t\tfinal /*@Thrown\052/ boolean eq_2 = BOXED_visibility == &lt;%javaMM.JavaMMTables%&gt;.ELITid_public;\n\t\t\t\tCAUGHT_eq_2 = eq_2;\n\t\t\t}\n\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\tCAUGHT_eq_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_3 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_eq_2);\n\t\t\tCAUGHT_and_3 = and_3;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_and_3 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_oclIsTypeOf;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_PrimitiveTypeBoolean_0 = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_PrimitiveTypeBoolean, null);\n\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.TypeAccess%&gt; returnType = method.getReturnType();\n\t\t\tif (returnType == null) {\n\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::TypeAccess::type\\\'\");\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.Type%&gt; type_2 = returnType.getType();\n\t\t\tfinal /*@Thrown\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, type_2, TYP_javaMM_c_c_PrimitiveTypeBoolean_0).booleanValue();\n\t\t\tCAUGHT_oclIsTypeOf = oclIsTypeOf;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_4 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_oclIsTypeOf);\n\t\tCAUGHT_and_4 = and_4;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_and_4 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\t//\n\tif (CAUGHT_and_4 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\t\t\t\t\t// Normal successful body evaluation result\n\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately\n\t}\n\telse if (CAUGHT_and_4 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\t\t\t\t// Normal unsuccessful body evaluation result\n\t\t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n\t}\n\telse if (CAUGHT_and_4 == null) {\t\t\t\t\t\t\t\t// Abnormal null body evaluation result\n\t\tif (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\taccumulator = null;\t\t\t\t\t\t\t\t\t\t// Cache a null failure\n\t\t}\n\t}\n\telse if (CAUGHT_and_4 instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;) {\t\t// Abnormal exception evaluation result\n\t\taccumulator = CAUGHT_and_4;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n\t}\n\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n\t\taccumulator = new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(&lt;%org.eclipse.ocl.pivot.messages.PivotMessages%&gt;.NonBooleanBody, \"exists\");\n\t}\n}\nreturn exists;'"
	 * @generated
	 */
	Boolean hasEquals();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * getMethods()\n * -&gt;exists(method | method.name = \'hashCode\' and\n *   method.parameters-&gt;isEmpty() and\n *   method.thrownExceptions-&gt;isEmpty() and method.modifier &lt;&gt; null and method.modifier.visibility = VisibilityKind::public and\n *   method.returnType.type.oclIsTypeOf(PrimitiveTypeInt))\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.MethodDeclaration%&gt;&gt; getMethods = this.getMethods();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_getMethods = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_MethodDeclaration, getMethods);\n/*@Thrown\052/ &lt;%java.lang.Object%&gt; accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_method = BOXED_getMethods.iterator();\n/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; exists;\nwhile (true) {\n\tif (!ITERATOR_method.hasNext()) {\n\t\tif (accumulator == null) {\n\t\t\texists = null;\n\t\t}\n\t\telse if (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t}\n\t\telse {\n\t\t\tthrow (&lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;)accumulator;\n\t\t}\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%javaMM.MethodDeclaration%&gt; method = (&lt;%javaMM.MethodDeclaration%&gt;)ITERATOR_method.next();\n\t/**\n\t * method.name = \'hashCode\' and\n\t * method.parameters-&gt;isEmpty() and\n\t * method.thrownExceptions-&gt;isEmpty() and method.modifier &lt;&gt; null and method.modifier.visibility = VisibilityKind::public and\n\t * method.returnType.type.oclIsTypeOf(PrimitiveTypeInt)\n\t \052/\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_3;\n\ttry {\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_2;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.String%&gt; name = method.getName();\n\t\t\tfinal /*@NonInvalid\052/ boolean eq = &lt;%javaMM.JavaMMTables%&gt;.STR_hashCode.equals(name);\n\t\t\t/*@NonInvalid\052/ boolean and;\n\t\t\tif (eq) {\n\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.SingleVariableDeclaration%&gt;&gt; parameters = method.getParameters();\n\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_parameters = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_SingleVariableDeclaration, parameters);\n\t\t\t\tfinal /*@NonInvalid\052/ boolean isEmpty = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionIsEmptyOperation%&gt;.INSTANCE.evaluate(BOXED_parameters).booleanValue();\n\t\t\t\tand = isEmpty;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tand = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t}\n\t\t\t/*@NonInvalid\052/ boolean and_0;\n\t\t\tif (and) {\n\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.TypeAccess%&gt;&gt; thrownExceptions = method.getThrownExceptions();\n\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_thrownExceptions = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_TypeAccess, thrownExceptions);\n\t\t\t\tfinal /*@NonInvalid\052/ boolean isEmpty_0 = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionIsEmptyOperation%&gt;.INSTANCE.evaluate(BOXED_thrownExceptions).booleanValue();\n\t\t\t\tand_0 = isEmpty_0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tand_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t}\n\t\t\t/*@NonInvalid\052/ boolean and_1;\n\t\t\tif (and_0) {\n\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier = method.getModifier();\n\t\t\t\tfinal /*@NonInvalid\052/ boolean ne = modifier != null;\n\t\t\t\tand_1 = ne;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tand_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t}\n\t\t\t/*@Thrown\052/ boolean and_2;\n\t\t\tif (and_1) {\n\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier_0 = method.getModifier();\n\t\t\t\tif (modifier_0 == null) {\n\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::Modifier::visibility\\\'\");\n\t\t\t\t}\n\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.VisibilityKind%&gt; visibility = modifier_0.getVisibility();\n\t\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_visibility = visibility == null ? null : &lt;%javaMM.JavaMMTables%&gt;.ENUMid_VisibilityKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(visibility.getName()));\n\t\t\t\tfinal /*@Thrown\052/ boolean eq_0 = BOXED_visibility == &lt;%javaMM.JavaMMTables%&gt;.ELITid_public;\n\t\t\t\tand_2 = eq_0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tand_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t}\n\t\t\tCAUGHT_and_2 = and_2;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_and_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_oclIsTypeOf;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_PrimitiveTypeInt_0 = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_PrimitiveTypeInt, null);\n\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.TypeAccess%&gt; returnType = method.getReturnType();\n\t\t\tif (returnType == null) {\n\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::TypeAccess::type\\\'\");\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.Type%&gt; type_0 = returnType.getType();\n\t\t\tfinal /*@Thrown\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, type_0, TYP_javaMM_c_c_PrimitiveTypeInt_0).booleanValue();\n\t\t\tCAUGHT_oclIsTypeOf = oclIsTypeOf;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_3 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_oclIsTypeOf);\n\t\tCAUGHT_and_3 = and_3;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_and_3 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\t//\n\tif (CAUGHT_and_3 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\t\t\t\t\t// Normal successful body evaluation result\n\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately\n\t}\n\telse if (CAUGHT_and_3 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\t\t\t\t// Normal unsuccessful body evaluation result\n\t\t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n\t}\n\telse if (CAUGHT_and_3 == null) {\t\t\t\t\t\t\t\t// Abnormal null body evaluation result\n\t\tif (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\taccumulator = null;\t\t\t\t\t\t\t\t\t\t// Cache a null failure\n\t\t}\n\t}\n\telse if (CAUGHT_and_3 instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;) {\t\t// Abnormal exception evaluation result\n\t\taccumulator = CAUGHT_and_3;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n\t}\n\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n\t\taccumulator = new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(&lt;%org.eclipse.ocl.pivot.messages.PivotMessages%&gt;.NonBooleanBody, \"exists\");\n\t}\n}\nreturn exists;'"
	 * @generated
	 */
	Boolean hasHashcode();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * getMethods()\n * -&gt;exists(method | method.name = \'compareTo\' and\n *   method.parameters-&gt;size() = 1 and\n *   method.parameters-&gt;first().type.type.name = \'Object\' and method.modifier &lt;&gt; null and method.modifier.visibility = VisibilityKind::public and\n *   method.thrownExceptions-&gt;isEmpty() and\n *   method.returnType.type.oclIsTypeOf(PrimitiveTypeInt))\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.MethodDeclaration%&gt;&gt; getMethods = this.getMethods();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_getMethods = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_MethodDeclaration, getMethods);\n/*@Thrown\052/ &lt;%java.lang.Object%&gt; accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_method = BOXED_getMethods.iterator();\n/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; exists;\nwhile (true) {\n\tif (!ITERATOR_method.hasNext()) {\n\t\tif (accumulator == null) {\n\t\t\texists = null;\n\t\t}\n\t\telse if (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t}\n\t\telse {\n\t\t\tthrow (&lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;)accumulator;\n\t\t}\n\t\tbreak;\n\t}\n\t/*@NonInvalid\052/ &lt;%javaMM.MethodDeclaration%&gt; method = (&lt;%javaMM.MethodDeclaration%&gt;)ITERATOR_method.next();\n\t/**\n\t * method.name = \'compareTo\' and\n\t * method.parameters-&gt;size() = 1 and\n\t * method.parameters-&gt;first().type.type.name = \'Object\' and method.modifier &lt;&gt; null and method.modifier.visibility = VisibilityKind::public and\n\t * method.thrownExceptions-&gt;isEmpty() and\n\t * method.returnType.type.oclIsTypeOf(PrimitiveTypeInt)\n\t \052/\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_4;\n\ttry {\n\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_3;\n\t\ttry {\n\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_2;\n\t\t\ttry {\n\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_1;\n\t\t\t\ttry {\n\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_0;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.String%&gt; name = method.getName();\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean eq = &lt;%javaMM.JavaMMTables%&gt;.STR_compareTo.equals(name);\n\t\t\t\t\t\t/*@NonInvalid\052/ boolean and;\n\t\t\t\t\t\tif (eq) {\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.SingleVariableDeclaration%&gt;&gt; parameters = method.getParameters();\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_parameters = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_SingleVariableDeclaration, parameters);\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; size = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionSizeOperation%&gt;.INSTANCE.evaluate(BOXED_parameters);\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean eq_0 = size.equals(&lt;%javaMM.JavaMMTables%&gt;.INT_1);\n\t\t\t\t\t\t\tand = eq_0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tand = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/*@Thrown\052/ boolean and_0;\n\t\t\t\t\t\tif (and) {\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.SingleVariableDeclaration%&gt;&gt; parameters_0 = method.getParameters();\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_parameters_0 = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_SingleVariableDeclaration, parameters_0);\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.SingleVariableDeclaration%&gt; first = (&lt;%javaMM.SingleVariableDeclaration%&gt;)&lt;%org.eclipse.ocl.pivot.library.collection.OrderedCollectionFirstOperation%&gt;.INSTANCE.evaluate(BOXED_parameters_0);\n\t\t\t\t\t\t\tif (first == null) {\n\t\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::SingleVariableDeclaration::type\\\'\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.TypeAccess%&gt; type_0 = first.getType();\n\t\t\t\t\t\t\tif (type_0 == null) {\n\t\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::TypeAccess::type\\\'\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.Type%&gt; type_1 = type_0.getType();\n\t\t\t\t\t\t\tif (type_1 == null) {\n\t\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::NamedElement::name\\\'\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.String%&gt; name_0 = type_1.getName();\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ boolean eq_1 = &lt;%javaMM.JavaMMTables%&gt;.STR_Object.equals(name_0);\n\t\t\t\t\t\t\tand_0 = eq_1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tand_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tCAUGHT_and_0 = and_0;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_and_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier = method.getModifier();\n\t\t\t\t\tfinal /*@NonInvalid\052/ boolean ne = modifier != null;\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_1 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_0, ne);\n\t\t\t\t\tCAUGHT_and_1 = and_1;\n\t\t\t\t}\n\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\tCAUGHT_and_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t}\n\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_eq_2;\n\t\t\t\ttry {\n\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier_0 = method.getModifier();\n\t\t\t\t\tif (modifier_0 == null) {\n\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::Modifier::visibility\\\'\");\n\t\t\t\t\t}\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.VisibilityKind%&gt; visibility = modifier_0.getVisibility();\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_visibility = visibility == null ? null : &lt;%javaMM.JavaMMTables%&gt;.ENUMid_VisibilityKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(visibility.getName()));\n\t\t\t\t\tfinal /*@Thrown\052/ boolean eq_2 = BOXED_visibility == &lt;%javaMM.JavaMMTables%&gt;.ELITid_public;\n\t\t\t\t\tCAUGHT_eq_2 = eq_2;\n\t\t\t\t}\n\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\tCAUGHT_eq_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t}\n\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_2 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_1, CAUGHT_eq_2);\n\t\t\t\tCAUGHT_and_2 = and_2;\n\t\t\t}\n\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\tCAUGHT_and_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t}\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.TypeAccess%&gt;&gt; thrownExceptions = method.getThrownExceptions();\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_thrownExceptions = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_TypeAccess, thrownExceptions);\n\t\t\tfinal /*@NonInvalid\052/ boolean isEmpty = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionIsEmptyOperation%&gt;.INSTANCE.evaluate(BOXED_thrownExceptions).booleanValue();\n\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_3 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_2, isEmpty);\n\t\t\tCAUGHT_and_3 = and_3;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_and_3 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_oclIsTypeOf;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_PrimitiveTypeInt_0 = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_PrimitiveTypeInt, null);\n\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.TypeAccess%&gt; returnType = method.getReturnType();\n\t\t\tif (returnType == null) {\n\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::TypeAccess::type\\\'\");\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.Type%&gt; type_2 = returnType.getType();\n\t\t\tfinal /*@Thrown\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, type_2, TYP_javaMM_c_c_PrimitiveTypeInt_0).booleanValue();\n\t\t\tCAUGHT_oclIsTypeOf = oclIsTypeOf;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_4 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_oclIsTypeOf);\n\t\tCAUGHT_and_4 = and_4;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_and_4 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\t//\n\tif (CAUGHT_and_4 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\t\t\t\t\t// Normal successful body evaluation result\n\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately\n\t}\n\telse if (CAUGHT_and_4 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\t\t\t\t// Normal unsuccessful body evaluation result\n\t\t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n\t}\n\telse if (CAUGHT_and_4 == null) {\t\t\t\t\t\t\t\t// Abnormal null body evaluation result\n\t\tif (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\taccumulator = null;\t\t\t\t\t\t\t\t\t\t// Cache a null failure\n\t\t}\n\t}\n\telse if (CAUGHT_and_4 instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;) {\t\t// Abnormal exception evaluation result\n\t\taccumulator = CAUGHT_and_4;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n\t}\n\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n\t\taccumulator = new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(&lt;%org.eclipse.ocl.pivot.messages.PivotMessages%&gt;.NonBooleanBody, \"exists\");\n\t}\n}\nreturn exists;'"
	 * @generated
	 */
	Boolean hasCompareTo();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv noCovariantCompareTo:\n *   let\n *     severity : Integer[1] = \'ClassDeclaration::noCovariantCompareTo\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let\n *         result : Boolean[?] = getMethods()\n *         -&gt;exists(method | method.name = \'compareTo\' and method.modifier &lt;&gt; null and method.modifier.visibility = VisibilityKind::public and\n *           method.returnType.type.oclIsTypeOf(PrimitiveTypeInt)) implies\n *         hasCompareTo()\n *       in\n *         \'ClassDeclaration::noCovariantCompareTo\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_noCovariantCompareTo);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_0;\nif (le) {\n\tsymbol_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_result;\n\ttry {\n\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_exists;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.MethodDeclaration%&gt;&gt; getMethods = this.getMethods();\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_getMethods = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_MethodDeclaration, getMethods);\n\t\t\t/*@Thrown\052/ &lt;%java.lang.Object%&gt; accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_method = BOXED_getMethods.iterator();\n\t\t\t/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; exists;\n\t\t\twhile (true) {\n\t\t\t\tif (!ITERATOR_method.hasNext()) {\n\t\t\t\t\tif (accumulator == null) {\n\t\t\t\t\t\texists = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\t\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow (&lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;)accumulator;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/*@NonInvalid\052/ &lt;%javaMM.MethodDeclaration%&gt; method = (&lt;%javaMM.MethodDeclaration%&gt;)ITERATOR_method.next();\n\t\t\t\t/**\n\t\t\t\t * method.name = \'compareTo\' and method.modifier &lt;&gt; null and method.modifier.visibility = VisibilityKind::public and\n\t\t\t\t * method.returnType.type.oclIsTypeOf(PrimitiveTypeInt)\n\t\t\t\t \052/\n\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_1;\n\t\t\t\ttry {\n\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_0;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.String%&gt; name = method.getName();\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean eq = &lt;%javaMM.JavaMMTables%&gt;.STR_compareTo.equals(name);\n\t\t\t\t\t\t/*@NonInvalid\052/ boolean and;\n\t\t\t\t\t\tif (eq) {\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier = method.getModifier();\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean ne = modifier != null;\n\t\t\t\t\t\t\tand = ne;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tand = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/*@Thrown\052/ boolean and_0;\n\t\t\t\t\t\tif (and) {\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier_0 = method.getModifier();\n\t\t\t\t\t\t\tif (modifier_0 == null) {\n\t\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::Modifier::visibility\\\'\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.VisibilityKind%&gt; visibility = modifier_0.getVisibility();\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_visibility = visibility == null ? null : &lt;%javaMM.JavaMMTables%&gt;.ENUMid_VisibilityKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(visibility.getName()));\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ boolean eq_0 = BOXED_visibility == &lt;%javaMM.JavaMMTables%&gt;.ELITid_public;\n\t\t\t\t\t\t\tand_0 = eq_0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tand_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tCAUGHT_and_0 = and_0;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_and_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_oclIsTypeOf;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_PrimitiveTypeInt = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_PrimitiveTypeInt, null);\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.TypeAccess%&gt; returnType = method.getReturnType();\n\t\t\t\t\t\tif (returnType == null) {\n\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::TypeAccess::type\\\'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.Type%&gt; type_0 = returnType.getType();\n\t\t\t\t\t\tfinal /*@Thrown\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, type_0, TYP_javaMM_c_c_PrimitiveTypeInt).booleanValue();\n\t\t\t\t\t\tCAUGHT_oclIsTypeOf = oclIsTypeOf;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_1 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_oclIsTypeOf);\n\t\t\t\t\tCAUGHT_and_1 = and_1;\n\t\t\t\t}\n\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\tCAUGHT_and_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t}\n\t\t\t\t//\n\t\t\t\tif (CAUGHT_and_1 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\t\t\t\t\t// Normal successful body evaluation result\n\t\t\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_and_1 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\t\t\t\t// Normal unsuccessful body evaluation result\n\t\t\t\t\t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_and_1 == null) {\t\t\t\t\t\t\t\t// Abnormal null body evaluation result\n\t\t\t\t\tif (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\t\t\t\taccumulator = null;\t\t\t\t\t\t\t\t\t\t// Cache a null failure\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_and_1 instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;) {\t\t// Abnormal exception evaluation result\n\t\t\t\t\taccumulator = CAUGHT_and_1;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n\t\t\t\t}\n\t\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n\t\t\t\t\taccumulator = new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(&lt;%org.eclipse.ocl.pivot.messages.PivotMessages%&gt;.NonBooleanBody, \"exists\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tCAUGHT_exists = exists;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_exists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\tfinal /*@NonInvalid\052/ boolean hasCompareTo = this.hasCompareTo();\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; result = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanImpliesOperation%&gt;.INSTANCE.evaluate(CAUGHT_exists, hasCompareTo);\n\t\tCAUGHT_result = result;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_result = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_noCovariantCompareTo, this, (Object)null, diagnostics, context, (Object)null, severity_0, CAUGHT_result, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n\tsymbol_0 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_0;'"
	 * @generated
	 */
	boolean noCovariantCompareTo(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv hashCodeAndEquals:\n *   let\n *     severity : Integer[1] = \'ClassDeclaration::hashCodeAndEquals\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let\n *         result : Boolean[?] = let hasEq : Boolean[?] = hasEquals()\n *         in\n *           let hasHc : Boolean[?] = hasHashcode()\n *           in (hasEq implies hasHc) and (hasHc implies hasEq)\n *       in\n *         \'ClassDeclaration::hashCodeAndEquals\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_hashCodeAndEquals);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_0;\nif (le) {\n\tsymbol_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\tfinal /*@NonInvalid\052/ boolean hasEq = this.hasEquals();\n\tfinal /*@NonInvalid\052/ boolean hasHc = this.hasHashcode();\n\t/*@NonInvalid\052/ boolean implies;\n\tif (hasEq) {\n\t\timplies = hasHc;\n\t}\n\telse {\n\t\timplies = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t}\n\t/*@NonInvalid\052/ boolean and;\n\tif (implies) {\n\t\t/*@NonInvalid\052/ boolean implies_0;\n\t\tif (hasHc) {\n\t\t\timplies_0 = hasEq;\n\t\t}\n\t\telse {\n\t\t\timplies_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t}\n\t\tand = implies_0;\n\t}\n\telse {\n\t\tand = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_hashCodeAndEquals, this, (Object)null, diagnostics, context, (Object)null, severity_0, and, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n\tsymbol_0 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_0;'"
	 * @generated
	 */
	boolean hashCodeAndEquals(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv serialUIDInSerializableClass:\n *   let\n *     severity : Integer[1] = \'ClassDeclaration::serialUIDInSerializableClass\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let\n *         result : Boolean[?] = self.implements(\'Serializable\') implies\n *         self.bodyDeclarations-&gt;selectByKind(FieldDeclaration)\n *         -&gt;exists(bd | bd.name = \'serialVersionUID\' and bd.modifier.static and bd.modifier.inheritance = InheritanceKind::final and\n *           bd.type.type.oclIsTypeOf(PrimitiveTypeLong))\n *       in\n *         \'ClassDeclaration::serialUIDInSerializableClass\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_serialUIDInSerializableClass);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_2;\nif (le) {\n\tsymbol_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_result;\n\ttry {\n\t\tfinal /*@NonInvalid\052/ boolean symbol_0 = ((&lt;%javaMM.AbstractTypeDeclaration%&gt;)this).implements_(&lt;%javaMM.JavaMMTables%&gt;.STR_Serializable);\n\t\t/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; result;\n\t\tif (symbol_0) {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_FieldDeclaration = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_FieldDeclaration, null);\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.BodyDeclaration%&gt;&gt; bodyDeclarations = this.getBodyDeclarations();\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_bodyDeclarations = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_BodyDeclaration, bodyDeclarations);\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; selectByKind = (&lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt;)&lt;%org.eclipse.ocl.pivot.library.collection.CollectionSelectByKindOperation%&gt;.INSTANCE.evaluate(executor, BOXED_bodyDeclarations, TYP_javaMM_c_c_FieldDeclaration);\n\t\t\t/*@Thrown\052/ &lt;%java.lang.Object%&gt; accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_bd = selectByKind.iterator();\n\t\t\t/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; exists;\n\t\t\twhile (true) {\n\t\t\t\tif (!ITERATOR_bd.hasNext()) {\n\t\t\t\t\tif (accumulator == null) {\n\t\t\t\t\t\texists = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\t\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow (&lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;)accumulator;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/*@NonInvalid\052/ &lt;%javaMM.FieldDeclaration%&gt; bd = (&lt;%javaMM.FieldDeclaration%&gt;)ITERATOR_bd.next();\n\t\t\t\t/**\n\t\t\t\t * bd.name = \'serialVersionUID\' and bd.modifier.static and bd.modifier.inheritance = InheritanceKind::final and\n\t\t\t\t * bd.type.type.oclIsTypeOf(PrimitiveTypeLong)\n\t\t\t\t \052/\n\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_1;\n\t\t\t\ttry {\n\t\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_0;\n\t\t\t\t\ttry {\n\t\t\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.String%&gt; name = bd.getName();\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean eq = &lt;%javaMM.JavaMMTables%&gt;.STR_serialVersionUID.equals(name);\n\t\t\t\t\t\t\t/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and;\n\t\t\t\t\t\t\tif (eq) {\n\t\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier = bd.getModifier();\n\t\t\t\t\t\t\t\tif (modifier == null) {\n\t\t\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::Modifier::static\\\'\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; symbol_1 = modifier.getStatic();\n\t\t\t\t\t\t\t\tand = symbol_1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tand = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tCAUGHT_and = and;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\t\tCAUGHT_and = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_eq_0;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier_0 = bd.getModifier();\n\t\t\t\t\t\t\tif (modifier_0 == null) {\n\t\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::Modifier::inheritance\\\'\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.InheritanceKind%&gt; inheritance = modifier_0.getInheritance();\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_inheritance = inheritance == null ? null : &lt;%javaMM.JavaMMTables%&gt;.ENUMid_InheritanceKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(inheritance.getName()));\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ boolean eq_0 = BOXED_inheritance == &lt;%javaMM.JavaMMTables%&gt;.ELITid_final;\n\t\t\t\t\t\t\tCAUGHT_eq_0 = eq_0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\t\tCAUGHT_eq_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_0 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and, CAUGHT_eq_0);\n\t\t\t\t\t\tCAUGHT_and_0 = and_0;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_and_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_oclIsTypeOf;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_PrimitiveTypeLong = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_PrimitiveTypeLong, null);\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.TypeAccess%&gt; type_0 = bd.getType();\n\t\t\t\t\t\tif (type_0 == null) {\n\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::TypeAccess::type\\\'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.Type%&gt; type_1 = type_0.getType();\n\t\t\t\t\t\tfinal /*@Thrown\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, type_1, TYP_javaMM_c_c_PrimitiveTypeLong).booleanValue();\n\t\t\t\t\t\tCAUGHT_oclIsTypeOf = oclIsTypeOf;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_1 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_oclIsTypeOf);\n\t\t\t\t\tCAUGHT_and_1 = and_1;\n\t\t\t\t}\n\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\tCAUGHT_and_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t}\n\t\t\t\t//\n\t\t\t\tif (CAUGHT_and_1 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\t\t\t\t\t// Normal successful body evaluation result\n\t\t\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_and_1 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\t\t\t\t// Normal unsuccessful body evaluation result\n\t\t\t\t\t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_and_1 == null) {\t\t\t\t\t\t\t\t// Abnormal null body evaluation result\n\t\t\t\t\tif (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\t\t\t\taccumulator = null;\t\t\t\t\t\t\t\t\t\t// Cache a null failure\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_and_1 instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;) {\t\t// Abnormal exception evaluation result\n\t\t\t\t\taccumulator = CAUGHT_and_1;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n\t\t\t\t}\n\t\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n\t\t\t\t\taccumulator = new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(&lt;%org.eclipse.ocl.pivot.messages.PivotMessages%&gt;.NonBooleanBody, \"exists\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult = exists;\n\t\t}\n\t\telse {\n\t\t\tresult = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t}\n\t\tCAUGHT_result = result;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_result = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_serialUIDInSerializableClass, this, (Object)null, diagnostics, context, (Object)null, severity_0, CAUGHT_result, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n\tsymbol_2 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_2;'"
	 * @generated
	 */
	boolean serialUIDInSerializableClass(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv equalsAndCompareTo:\n *   let\n *     severity : Integer[1] = \'ClassDeclaration::equalsAndCompareTo\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let result : Boolean[?] = hasCompareTo() implies hasEquals()\n *       in\n *         \'ClassDeclaration::equalsAndCompareTo\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_equalsAndCompareTo);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_0;\nif (le) {\n\tsymbol_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\tfinal /*@NonInvalid\052/ boolean hasCompareTo = this.hasCompareTo();\n\t/*@NonInvalid\052/ boolean result;\n\tif (hasCompareTo) {\n\t\tfinal /*@NonInvalid\052/ boolean hasEquals = this.hasEquals();\n\t\tresult = hasEquals;\n\t}\n\telse {\n\t\tresult = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_equalsAndCompareTo, this, (Object)null, diagnostics, context, (Object)null, severity_0, result, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n\tsymbol_0 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_0;'"
	 * @generated
	 */
	boolean equalsAndCompareTo(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv noRedundantInterfaceImpl:\n *   let\n *     severity : Integer[1] = \'ClassDeclaration::noRedundantInterfaceImpl\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let result : Boolean[?] = self.superInterfaces &lt;&gt; null and self.superClass &lt;&gt; null and\n *         self.superClass.type.oclIsKindOf(ClassDeclaration) and\n *         self.superClass.type.oclAsType(ClassDeclaration).superInterfaces &lt;&gt; null implies\n *         self.superInterfaces-&gt;exists(tIface |\n *           self.superClass.type.oclIsKindOf(AbstractTypeDeclaration) implies\n *           self.superClass.type.oclAsType(AbstractTypeDeclaration)\n *           .superInterfaces-&gt;includes(tIface))\n *       in\n *         \'ClassDeclaration::noRedundantInterfaceImpl\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_noRedundantInterfaceImpl);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_0;\nif (le) {\n\tsymbol_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_result;\n\ttry {\n\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_0;\n\t\ttry {\n\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_and;\n\t\t\ttry {\n\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.TypeAccess%&gt; superClass = this.getSuperClass();\n\t\t\t\tfinal /*@NonInvalid\052/ boolean ne = superClass != null;\n\t\t\t\t/*@Thrown\052/ boolean and;\n\t\t\t\tif (ne) {\n\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_ClassDeclaration = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_ClassDeclaration, null);\n\t\t\t\t\tif (superClass == null) {\n\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::TypeAccess::type\\\'\");\n\t\t\t\t\t}\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.Type%&gt; type_0 = superClass.getType();\n\t\t\t\t\tfinal /*@Thrown\052/ boolean oclIsKindOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsKindOfOperation%&gt;.INSTANCE.evaluate(executor, type_0, TYP_javaMM_c_c_ClassDeclaration).booleanValue();\n\t\t\t\t\tand = oclIsKindOf;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tand = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t}\n\t\t\t\tCAUGHT_and = and;\n\t\t\t}\n\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\tCAUGHT_and = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t}\n\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_0 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and, &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE);\n\t\t\tCAUGHT_and_0 = and_0;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_and_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_exists;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.TypeAccess%&gt;&gt; superInterfaces = this.getSuperInterfaces();\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_superInterfaces = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_TypeAccess, superInterfaces);\n\t\t\t/*@Thrown\052/ &lt;%java.lang.Object%&gt; accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_tIface = BOXED_superInterfaces.iterator();\n\t\t\t/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; exists;\n\t\t\twhile (true) {\n\t\t\t\tif (!ITERATOR_tIface.hasNext()) {\n\t\t\t\t\tif (accumulator == null) {\n\t\t\t\t\t\texists = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\t\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow (&lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;)accumulator;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/*@NonInvalid\052/ &lt;%javaMM.TypeAccess%&gt; tIface = (&lt;%javaMM.TypeAccess%&gt;)ITERATOR_tIface.next();\n\t\t\t\t/**\n\t\t\t\t *\n\t\t\t\t * self.superClass.type.oclIsKindOf(AbstractTypeDeclaration) implies\n\t\t\t\t * self.superClass.type.oclAsType(AbstractTypeDeclaration)\n\t\t\t\t * .superInterfaces-&gt;includes(tIface)\n\t\t\t\t \052/\n\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_implies;\n\t\t\t\ttry {\n\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_oclIsKindOf_0;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_AbstractTypeDeclaration = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_AbstractTypeDeclaration, null);\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.TypeAccess%&gt; superClass_1 = this.getSuperClass();\n\t\t\t\t\t\tif (superClass_1 == null) {\n\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::TypeAccess::type\\\'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.Type%&gt; type_1 = superClass_1.getType();\n\t\t\t\t\t\tfinal /*@Thrown\052/ boolean oclIsKindOf_0 = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsKindOfOperation%&gt;.INSTANCE.evaluate(executor, type_1, TYP_javaMM_c_c_AbstractTypeDeclaration).booleanValue();\n\t\t\t\t\t\tCAUGHT_oclIsKindOf_0 = oclIsKindOf_0;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_oclIsKindOf_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_includes;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_AbstractTypeDeclaration_0 = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_AbstractTypeDeclaration, null);\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.TypeAccess%&gt; superClass_2 = this.getSuperClass();\n\t\t\t\t\t\tif (superClass_2 == null) {\n\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::TypeAccess::type\\\'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.Type%&gt; type_2 = superClass_2.getType();\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.AbstractTypeDeclaration%&gt; oclAsType = &lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState((&lt;%javaMM.AbstractTypeDeclaration%&gt;)&lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation%&gt;.INSTANCE.evaluate(executor, type_2, TYP_javaMM_c_c_AbstractTypeDeclaration_0));\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.TypeAccess%&gt;&gt; superInterfaces_0 = oclAsType.getSuperInterfaces();\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_superInterfaces_0 = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_TypeAccess, superInterfaces_0);\n\t\t\t\t\t\tfinal /*@Thrown\052/ boolean includes = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionIncludesOperation%&gt;.INSTANCE.evaluate(BOXED_superInterfaces_0, tIface).booleanValue();\n\t\t\t\t\t\tCAUGHT_includes = includes;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_includes = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; implies = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanImpliesOperation%&gt;.INSTANCE.evaluate(CAUGHT_oclIsKindOf_0, CAUGHT_includes);\n\t\t\t\t\tCAUGHT_implies = implies;\n\t\t\t\t}\n\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\tCAUGHT_implies = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t}\n\t\t\t\t//\n\t\t\t\tif (CAUGHT_implies == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\t\t\t\t\t// Normal successful body evaluation result\n\t\t\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_implies == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\t\t\t\t// Normal unsuccessful body evaluation result\n\t\t\t\t\t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_implies == null) {\t\t\t\t\t\t\t\t// Abnormal null body evaluation result\n\t\t\t\t\tif (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\t\t\t\taccumulator = null;\t\t\t\t\t\t\t\t\t\t// Cache a null failure\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_implies instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;) {\t\t// Abnormal exception evaluation result\n\t\t\t\t\taccumulator = CAUGHT_implies;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n\t\t\t\t}\n\t\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n\t\t\t\t\taccumulator = new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(&lt;%org.eclipse.ocl.pivot.messages.PivotMessages%&gt;.NonBooleanBody, \"exists\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tCAUGHT_exists = exists;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_exists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; result = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanImpliesOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_exists);\n\t\tCAUGHT_result = result;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_result = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_noRedundantInterfaceImpl, this, (Object)null, diagnostics, context, (Object)null, severity_0, CAUGHT_result, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n\tsymbol_0 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_0;'"
	 * @generated
	 */
	boolean noRedundantInterfaceImpl(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv cloneInCloneable:\n *   let\n *     severity : Integer[1] = \'ClassDeclaration::cloneInCloneable\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let\n *         result : Boolean[?] = self.implements(\'Cloneable\') implies\n *         self.getMethods()\n *         -&gt;exists(md | md.name = \'clone\' and\n *           md.parameters-&gt;isEmpty() and\n *           md.thrownExceptions-&gt;size() = 1 and\n *           md.thrownExceptions-&gt;first().type.name = \'CloneNotSupportedException\' and md.modifier &lt;&gt; null and md.modifier.visibility = VisibilityKind::public)\n *       in\n *         \'ClassDeclaration::cloneInCloneable\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_cloneInCloneable);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_1;\nif (le) {\n\tsymbol_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_result;\n\ttry {\n\t\tfinal /*@NonInvalid\052/ boolean symbol_0 = ((&lt;%javaMM.AbstractTypeDeclaration%&gt;)this).implements_(&lt;%javaMM.JavaMMTables%&gt;.STR_Cloneable);\n\t\t/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; result;\n\t\tif (symbol_0) {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.MethodDeclaration%&gt;&gt; getMethods = this.getMethods();\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_getMethods = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_MethodDeclaration, getMethods);\n\t\t\t/*@Thrown\052/ &lt;%java.lang.Object%&gt; accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_md = BOXED_getMethods.iterator();\n\t\t\t/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; exists;\n\t\t\twhile (true) {\n\t\t\t\tif (!ITERATOR_md.hasNext()) {\n\t\t\t\t\tif (accumulator == null) {\n\t\t\t\t\t\texists = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\t\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow (&lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;)accumulator;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/*@NonInvalid\052/ &lt;%javaMM.MethodDeclaration%&gt; md = (&lt;%javaMM.MethodDeclaration%&gt;)ITERATOR_md.next();\n\t\t\t\t/**\n\t\t\t\t * md.name = \'clone\' and\n\t\t\t\t * md.parameters-&gt;isEmpty() and\n\t\t\t\t * md.thrownExceptions-&gt;size() = 1 and\n\t\t\t\t * md.thrownExceptions-&gt;first().type.name = \'CloneNotSupportedException\' and md.modifier &lt;&gt; null and md.modifier.visibility = VisibilityKind::public\n\t\t\t\t \052/\n\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_3;\n\t\t\t\ttry {\n\t\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_2;\n\t\t\t\t\ttry {\n\t\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_1;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.String%&gt; name = md.getName();\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean eq = &lt;%javaMM.JavaMMTables%&gt;.STR_clone.equals(name);\n\t\t\t\t\t\t\t/*@NonInvalid\052/ boolean and;\n\t\t\t\t\t\t\tif (eq) {\n\t\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.SingleVariableDeclaration%&gt;&gt; parameters = md.getParameters();\n\t\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_parameters = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_SingleVariableDeclaration, parameters);\n\t\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean isEmpty = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionIsEmptyOperation%&gt;.INSTANCE.evaluate(BOXED_parameters).booleanValue();\n\t\t\t\t\t\t\t\tand = isEmpty;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tand = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/*@NonInvalid\052/ boolean and_0;\n\t\t\t\t\t\t\tif (and) {\n\t\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.TypeAccess%&gt;&gt; thrownExceptions = md.getThrownExceptions();\n\t\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_thrownExceptions = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_TypeAccess, thrownExceptions);\n\t\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; size = &lt;%org.eclipse.ocl.pivot.library.collection.CollectionSizeOperation%&gt;.INSTANCE.evaluate(BOXED_thrownExceptions);\n\t\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean eq_0 = size.equals(&lt;%javaMM.JavaMMTables%&gt;.INT_1);\n\t\t\t\t\t\t\t\tand_0 = eq_0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tand_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/*@Thrown\052/ boolean and_1;\n\t\t\t\t\t\t\tif (and_0) {\n\t\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.TypeAccess%&gt;&gt; thrownExceptions_0 = md.getThrownExceptions();\n\t\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_thrownExceptions_0 = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_TypeAccess, thrownExceptions_0);\n\t\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.TypeAccess%&gt; first = (&lt;%javaMM.TypeAccess%&gt;)&lt;%org.eclipse.ocl.pivot.library.collection.OrderedCollectionFirstOperation%&gt;.INSTANCE.evaluate(BOXED_thrownExceptions_0);\n\t\t\t\t\t\t\t\tif (first == null) {\n\t\t\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::TypeAccess::type\\\'\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.Type%&gt; type_0 = first.getType();\n\t\t\t\t\t\t\t\tif (type_0 == null) {\n\t\t\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::NamedElement::name\\\'\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.String%&gt; name_0 = type_0.getName();\n\t\t\t\t\t\t\t\tfinal /*@Thrown\052/ boolean eq_1 = &lt;%javaMM.JavaMMTables%&gt;.STR_CloneNotSupportedException.equals(name_0);\n\t\t\t\t\t\t\t\tand_1 = eq_1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tand_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tCAUGHT_and_1 = and_1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\t\tCAUGHT_and_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier = md.getModifier();\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean ne = modifier != null;\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_2 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_1, ne);\n\t\t\t\t\t\tCAUGHT_and_2 = and_2;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_and_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_eq_2;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier_0 = md.getModifier();\n\t\t\t\t\t\tif (modifier_0 == null) {\n\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::Modifier::visibility\\\'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.VisibilityKind%&gt; visibility = modifier_0.getVisibility();\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_visibility = visibility == null ? null : &lt;%javaMM.JavaMMTables%&gt;.ENUMid_VisibilityKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(visibility.getName()));\n\t\t\t\t\t\tfinal /*@Thrown\052/ boolean eq_2 = BOXED_visibility == &lt;%javaMM.JavaMMTables%&gt;.ELITid_public;\n\t\t\t\t\t\tCAUGHT_eq_2 = eq_2;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_eq_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_3 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_eq_2);\n\t\t\t\t\tCAUGHT_and_3 = and_3;\n\t\t\t\t}\n\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\tCAUGHT_and_3 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t}\n\t\t\t\t//\n\t\t\t\tif (CAUGHT_and_3 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\t\t\t\t\t// Normal successful body evaluation result\n\t\t\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_and_3 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\t\t\t\t// Normal unsuccessful body evaluation result\n\t\t\t\t\t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_and_3 == null) {\t\t\t\t\t\t\t\t// Abnormal null body evaluation result\n\t\t\t\t\tif (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\t\t\t\taccumulator = null;\t\t\t\t\t\t\t\t\t\t// Cache a null failure\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_and_3 instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;) {\t\t// Abnormal exception evaluation result\n\t\t\t\t\taccumulator = CAUGHT_and_3;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n\t\t\t\t}\n\t\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n\t\t\t\t\taccumulator = new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(&lt;%org.eclipse.ocl.pivot.messages.PivotMessages%&gt;.NonBooleanBody, \"exists\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult = exists;\n\t\t}\n\t\telse {\n\t\t\tresult = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t}\n\t\tCAUGHT_result = result;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_result = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_cloneInCloneable, this, (Object)null, diagnostics, context, (Object)null, severity_0, CAUGHT_result, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n\tsymbol_1 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_1;'"
	 * @generated
	 */
	boolean cloneInCloneable(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv noCovariantEquals:\n *   let\n *     severity : Integer[1] = \'ClassDeclaration::noCovariantEquals\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let\n *         result : Boolean[?] = getMethods()\n *         -&gt;exists(method | method.name = \'equals\' and method.modifier &lt;&gt; null and method.modifier.visibility = VisibilityKind::public and\n *           method.returnType.type.oclIsTypeOf(PrimitiveTypeBoolean)) implies\n *         hasEquals()\n *       in\n *         \'ClassDeclaration::noCovariantEquals\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_noCovariantEquals);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_0;\nif (le) {\n\tsymbol_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_result;\n\ttry {\n\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_exists;\n\t\ttry {\n\t\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.MethodDeclaration%&gt;&gt; getMethods = this.getMethods();\n\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_getMethods = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_MethodDeclaration, getMethods);\n\t\t\t/*@Thrown\052/ &lt;%java.lang.Object%&gt; accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_method = BOXED_getMethods.iterator();\n\t\t\t/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; exists;\n\t\t\twhile (true) {\n\t\t\t\tif (!ITERATOR_method.hasNext()) {\n\t\t\t\t\tif (accumulator == null) {\n\t\t\t\t\t\texists = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\t\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow (&lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;)accumulator;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/*@NonInvalid\052/ &lt;%javaMM.MethodDeclaration%&gt; method = (&lt;%javaMM.MethodDeclaration%&gt;)ITERATOR_method.next();\n\t\t\t\t/**\n\t\t\t\t * method.name = \'equals\' and method.modifier &lt;&gt; null and method.modifier.visibility = VisibilityKind::public and\n\t\t\t\t * method.returnType.type.oclIsTypeOf(PrimitiveTypeBoolean)\n\t\t\t\t \052/\n\t\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_1;\n\t\t\t\ttry {\n\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_and_0;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.String%&gt; name = method.getName();\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean eq = &lt;%javaMM.JavaMMTables%&gt;.STR_equals.equals(name);\n\t\t\t\t\t\t/*@NonInvalid\052/ boolean and;\n\t\t\t\t\t\tif (eq) {\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier = method.getModifier();\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean ne = modifier != null;\n\t\t\t\t\t\t\tand = ne;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tand = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/*@Thrown\052/ boolean and_0;\n\t\t\t\t\t\tif (and) {\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Modifier%&gt; modifier_0 = method.getModifier();\n\t\t\t\t\t\t\tif (modifier_0 == null) {\n\t\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::Modifier::visibility\\\'\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.VisibilityKind%&gt; visibility = modifier_0.getVisibility();\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.ids.EnumerationLiteralId%&gt; BOXED_visibility = visibility == null ? null : &lt;%javaMM.JavaMMTables%&gt;.ENUMid_VisibilityKind.getEnumerationLiteralId(&lt;%org.eclipse.ocl.pivot.utilities.ClassUtil%&gt;.nonNullState(visibility.getName()));\n\t\t\t\t\t\t\tfinal /*@Thrown\052/ boolean eq_0 = BOXED_visibility == &lt;%javaMM.JavaMMTables%&gt;.ELITid_public;\n\t\t\t\t\t\t\tand_0 = eq_0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tand_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tCAUGHT_and_0 = and_0;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_and_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\t/*@Caught\052/ /*@NonNull\052/ &lt;%java.lang.Object%&gt; CAUGHT_oclIsTypeOf;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_PrimitiveTypeBoolean = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_PrimitiveTypeBoolean, null);\n\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.TypeAccess%&gt; returnType = method.getReturnType();\n\t\t\t\t\t\tif (returnType == null) {\n\t\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::TypeAccess::type\\\'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinal /*@Thrown\052/ &lt;%javaMM.Type%&gt; type_0 = returnType.getType();\n\t\t\t\t\t\tfinal /*@Thrown\052/ boolean oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsTypeOfOperation%&gt;.INSTANCE.evaluate(executor, type_0, TYP_javaMM_c_c_PrimitiveTypeBoolean).booleanValue();\n\t\t\t\t\t\tCAUGHT_oclIsTypeOf = oclIsTypeOf;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\t\tCAUGHT_oclIsTypeOf = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t\t}\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; and_1 = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanAndOperation%&gt;.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_oclIsTypeOf);\n\t\t\t\t\tCAUGHT_and_1 = and_1;\n\t\t\t\t}\n\t\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\t\tCAUGHT_and_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t\t}\n\t\t\t\t//\n\t\t\t\tif (CAUGHT_and_1 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\t\t\t\t\t// Normal successful body evaluation result\n\t\t\t\t\texists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_and_1 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\t\t\t\t// Normal unsuccessful body evaluation result\n\t\t\t\t\t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_and_1 == null) {\t\t\t\t\t\t\t\t// Abnormal null body evaluation result\n\t\t\t\t\tif (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\n\t\t\t\t\t\taccumulator = null;\t\t\t\t\t\t\t\t\t\t// Cache a null failure\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (CAUGHT_and_1 instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;) {\t\t// Abnormal exception evaluation result\n\t\t\t\t\taccumulator = CAUGHT_and_1;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n\t\t\t\t}\n\t\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n\t\t\t\t\taccumulator = new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(&lt;%org.eclipse.ocl.pivot.messages.PivotMessages%&gt;.NonBooleanBody, \"exists\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tCAUGHT_exists = exists;\n\t\t}\n\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\tCAUGHT_exists = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t}\n\t\tfinal /*@NonInvalid\052/ boolean hasEquals = this.hasEquals();\n\t\tfinal /*@Thrown\052/ &lt;%java.lang.Boolean%&gt; result = &lt;%org.eclipse.ocl.pivot.library.logical.BooleanImpliesOperation%&gt;.INSTANCE.evaluate(CAUGHT_exists, hasEquals);\n\t\tCAUGHT_result = result;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_result = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_noCovariantEquals, this, (Object)null, diagnostics, context, (Object)null, severity_0, CAUGHT_result, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n\tsymbol_0 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_0;'"
	 * @generated
	 */
	boolean noCovariantEquals(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv noObscuredVariables:\n *   let\n *     severity : Integer[1] = \'ClassDeclaration::noObscuredVariables\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let\n *         result : Boolean[?] = let\n *           fields : OrderedSet(javaMM::FieldDeclaration) = self.bodyDeclarations-&gt;selectByKind(FieldDeclaration)\n *         in\n *           self.bodyDeclarations-&gt;selectByKind(AbstractMethodDeclaration)\n *           -&gt;forAll(md | md.body &lt;&gt; null implies\n *             md.body.statements-&gt;selectByKind(VariableDeclaration)\n *             -&gt;forAll(vd | fields-&gt;forAll(fd | fd.name &lt;&gt; vd.name)))\n *       in\n *         \'ClassDeclaration::noObscuredVariables\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.ids.IdResolver%&gt; idResolver = executor.getIdResolver();\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_noObscuredVariables);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_0;\nif (le) {\n\tsymbol_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_forAll;\n\ttry {\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_FieldDeclaration_0 = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_FieldDeclaration, null);\n\t\tfinal /*@NonInvalid\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.BodyDeclaration%&gt;&gt; bodyDeclarations_0 = this.getBodyDeclarations();\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_bodyDeclarations_0 = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_BodyDeclaration, bodyDeclarations_0);\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; fields = (&lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt;)&lt;%org.eclipse.ocl.pivot.library.collection.CollectionSelectByKindOperation%&gt;.INSTANCE.evaluate(executor, BOXED_bodyDeclarations_0, TYP_javaMM_c_c_FieldDeclaration_0);\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_AbstractMethodDeclaration = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_AbstractMethodDeclaration, null);\n\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; selectByKind = (&lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt;)&lt;%org.eclipse.ocl.pivot.library.collection.CollectionSelectByKindOperation%&gt;.INSTANCE.evaluate(executor, BOXED_bodyDeclarations_0, TYP_javaMM_c_c_AbstractMethodDeclaration);\n\t\t/*@Thrown\052/ &lt;%java.lang.Object%&gt; accumulator = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_md = selectByKind.iterator();\n\t\t/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; forAll;\n\t\twhile (true) {\n\t\t\tif (!ITERATOR_md.hasNext()) {\n\t\t\t\tif (accumulator == null) {\n\t\t\t\t\tforAll = null;\n\t\t\t\t}\n\t\t\t\telse if (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\t\t\t\tforAll = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow (&lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;)accumulator;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*@NonInvalid\052/ &lt;%javaMM.AbstractMethodDeclaration%&gt; md = (&lt;%javaMM.AbstractMethodDeclaration%&gt;)ITERATOR_md.next();\n\t\t\t/**\n\t\t\t * md.body &lt;&gt; null implies\n\t\t\t * md.body.statements-&gt;selectByKind(VariableDeclaration)\n\t\t\t * -&gt;forAll(vd | fields-&gt;forAll(fd | fd.name &lt;&gt; vd.name))\n\t\t\t \052/\n\t\t\t/*@Caught\052/ /*@Nullable\052/ &lt;%java.lang.Object%&gt; CAUGHT_implies;\n\t\t\ttry {\n\t\t\t\tfinal /*@NonInvalid\052/ &lt;%javaMM.Block%&gt; body = md.getBody();\n\t\t\t\tfinal /*@NonInvalid\052/ boolean ne = body != null;\n\t\t\t\t/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; implies;\n\t\t\t\tif (ne) {\n\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.Class%&gt; TYP_javaMM_c_c_VariableDeclaration = idResolver.getClass(&lt;%javaMM.JavaMMTables%&gt;.CLSSid_VariableDeclaration, null);\n\t\t\t\t\tif (body == null) {\n\t\t\t\t\t\tthrow new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(\"Null source for \\\'\\\'http://www.eclipse.org/MoDisco/Java/0.2.incubation/java\\\'::Block::statements\\\'\");\n\t\t\t\t\t}\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%java.util.List%&gt;&lt;&lt;%javaMM.Statement%&gt;&gt; statements = body.getStatements();\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; BOXED_statements = idResolver.createOrderedSetOfAll(&lt;%javaMM.JavaMMTables%&gt;.ORD_CLSSid_Statement, statements);\n\t\t\t\t\tfinal /*@Thrown\052/ &lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt; selectByKind_0 = (&lt;%org.eclipse.ocl.pivot.values.OrderedSetValue%&gt;)&lt;%org.eclipse.ocl.pivot.library.collection.CollectionSelectByKindOperation%&gt;.INSTANCE.evaluate(executor, BOXED_statements, TYP_javaMM_c_c_VariableDeclaration);\n\t\t\t\t\t/*@Thrown\052/ &lt;%java.lang.Object%&gt; accumulator_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t\t\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_vd = selectByKind_0.iterator();\n\t\t\t\t\t/*@Thrown\052/ &lt;%java.lang.Boolean%&gt; forAll_0;\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tif (!ITERATOR_vd.hasNext()) {\n\t\t\t\t\t\t\tif (accumulator_0 == null) {\n\t\t\t\t\t\t\t\tforAll_0 = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (accumulator_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\t\t\t\t\t\t\tforAll_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthrow (&lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;)accumulator_0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/*@NonInvalid\052/ &lt;%javaMM.VariableDeclaration%&gt; vd = (&lt;%javaMM.VariableDeclaration%&gt;)ITERATOR_vd.next();\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * fields-&gt;forAll(fd | fd.name &lt;&gt; vd.name)\n\t\t\t\t\t\t \052/\n\t\t\t\t\t\t/*@Thrown\052/ &lt;%java.lang.Object%&gt; accumulator_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t\t\t\t\t/*@NonNull\052/ &lt;%java.util.Iterator%&gt;&lt;&lt;%java.lang.Object%&gt;&gt; ITERATOR_fd = fields.iterator();\n\t\t\t\t\t\t/*@NonInvalid\052/ &lt;%java.lang.Boolean%&gt; forAll_1;\n\t\t\t\t\t\twhile (true) {\n\t\t\t\t\t\t\tif (!ITERATOR_fd.hasNext()) {\n\t\t\t\t\t\t\t\tif (accumulator_1 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\t\t\t\t\t\t\t\tforAll_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tthrow (&lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;)accumulator_1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/*@NonInvalid\052/ &lt;%javaMM.FieldDeclaration%&gt; fd = (&lt;%javaMM.FieldDeclaration%&gt;)ITERATOR_fd.next();\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * fd.name &lt;&gt; vd.name\n\t\t\t\t\t\t\t \052/\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.String%&gt; name = fd.getName();\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ &lt;%java.lang.String%&gt; name_0 = vd.getName();\n\t\t\t\t\t\t\tfinal /*@NonInvalid\052/ boolean ne_0 = (name != null) ? !name.equals(name_0) : (name_0 != null);\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\tif (ne_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\t\t\t\t\t// Normal unsuccessful body evaluation result\n\t\t\t\t\t\t\t\tforAll_1 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (ne_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\t\t\t\t// Normal successful body evaluation result\n\t\t\t\t\t\t\t\t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n\t\t\t\t\t\t\t\taccumulator_1 = new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(&lt;%org.eclipse.ocl.pivot.messages.PivotMessages%&gt;.NonBooleanBody, \"forAll\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//\n\t\t\t\t\t\tif (forAll_1 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\t\t\t\t\t// Normal unsuccessful body evaluation result\n\t\t\t\t\t\t\tforAll_0 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (forAll_1 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\t\t\t\t// Normal successful body evaluation result\n\t\t\t\t\t\t\t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (forAll_1 == null) {\t\t\t\t\t\t\t\t// Abnormal null body evaluation result\n\t\t\t\t\t\t\tif (accumulator_0 == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\t\t\t\t\t\t\taccumulator_0 = null;\t\t\t\t\t\t\t\t\t\t// Cache a null failure\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n\t\t\t\t\t\t\taccumulator_0 = new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(&lt;%org.eclipse.ocl.pivot.messages.PivotMessages%&gt;.NonBooleanBody, \"forAll\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\timplies = forAll_0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timplies = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t\t\t\t}\n\t\t\t\tCAUGHT_implies = implies;\n\t\t\t}\n\t\t\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\t\t\tCAUGHT_implies = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t\t\t}\n\t\t\t//\n\t\t\tif (CAUGHT_implies == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE) {\t\t\t\t\t// Normal unsuccessful body evaluation result\n\t\t\t\tforAll = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.FALSE_VALUE;\n\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately\n\t\t\t}\n\t\t\telse if (CAUGHT_implies == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\t\t\t\t// Normal successful body evaluation result\n\t\t\t\t;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n\t\t\t}\n\t\t\telse if (CAUGHT_implies == null) {\t\t\t\t\t\t\t\t// Abnormal null body evaluation result\n\t\t\t\tif (accumulator == &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE) {\n\t\t\t\t\taccumulator = null;\t\t\t\t\t\t\t\t\t\t// Cache a null failure\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (CAUGHT_implies instanceof &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;) {\t\t// Abnormal exception evaluation result\n\t\t\t\taccumulator = CAUGHT_implies;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n\t\t\t}\n\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n\t\t\t\taccumulator = new &lt;%org.eclipse.ocl.pivot.values.InvalidValueException%&gt;(&lt;%org.eclipse.ocl.pivot.messages.PivotMessages%&gt;.NonBooleanBody, \"forAll\");\n\t\t\t}\n\t\t}\n\t\tCAUGHT_forAll = forAll;\n\t}\n\tcatch (&lt;%java.lang.Exception%&gt; e) {\n\t\tCAUGHT_forAll = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.createInvalidValue(e);\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_noObscuredVariables, this, (Object)null, diagnostics, context, (Object)null, severity_0, CAUGHT_forAll, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n\tsymbol_0 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_0;'"
	 * @generated
	 */
	boolean noObscuredVariables(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n *\n * inv comparatorImplementsSerializable:\n *   let\n *     severity : Integer[1] = \'ClassDeclaration::comparatorImplementsSerializable\'.getSeverity()\n *   in\n *     if severity &lt;= 0\n *     then true\n *     else\n *       let\n *         result : Boolean[?] = self.implements(\'Comparator\') implies\n *         self.implements(\'Serializable\')\n *       in\n *         \'ClassDeclaration::comparatorImplementsSerializable\'.logDiagnostic(self, null, diagnostics, context, null, severity, result, 0)\n *     endif\n \052/\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.evaluation.Executor%&gt; executor = &lt;%org.eclipse.ocl.pivot.internal.utilities.PivotUtilInternal%&gt;.getExecutor(this);\nfinal /*@NonInvalid\052/ &lt;%org.eclipse.ocl.pivot.values.IntegerValue%&gt; severity_0 = &lt;%org.eclipse.ocl.pivot.library.string.CGStringGetSeverityOperation%&gt;.INSTANCE.evaluate(executor, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_comparatorImplementsSerializable);\nfinal /*@NonInvalid\052/ boolean le = &lt;%org.eclipse.ocl.pivot.library.oclany.OclComparableLessThanEqualOperation%&gt;.INSTANCE.evaluate(executor, severity_0, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n/*@NonInvalid\052/ boolean symbol_2;\nif (le) {\n\tsymbol_2 = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n}\nelse {\n\tfinal /*@NonInvalid\052/ boolean symbol_0 = ((&lt;%javaMM.AbstractTypeDeclaration%&gt;)this).implements_(&lt;%javaMM.JavaMMTables%&gt;.STR_Comparator);\n\t/*@NonInvalid\052/ boolean result;\n\tif (symbol_0) {\n\t\tfinal /*@NonInvalid\052/ boolean symbol_1 = ((&lt;%javaMM.AbstractTypeDeclaration%&gt;)this).implements_(&lt;%javaMM.JavaMMTables%&gt;.STR_Serializable);\n\t\tresult = symbol_1;\n\t}\n\telse {\n\t\tresult = &lt;%org.eclipse.ocl.pivot.utilities.ValueUtil%&gt;.TRUE_VALUE;\n\t}\n\tfinal /*@NonInvalid\052/ boolean logDiagnostic = &lt;%org.eclipse.ocl.pivot.library.string.CGStringLogDiagnosticOperation%&gt;.INSTANCE.evaluate(executor, &lt;%org.eclipse.ocl.pivot.ids.TypeId%&gt;.BOOLEAN, &lt;%javaMM.JavaMMTables%&gt;.STR_ClassDeclaration_c_c_comparatorImplementsSerializable, this, (Object)null, diagnostics, context, (Object)null, severity_0, result, &lt;%javaMM.JavaMMTables%&gt;.INT_0).booleanValue();\n\tsymbol_2 = logDiagnostic;\n}\nreturn Boolean.TRUE == symbol_2;'"
	 * @generated
	 */
	boolean comparatorImplementsSerializable(DiagnosticChain diagnostics, Map<Object, Object> context);

} // ClassDeclaration
